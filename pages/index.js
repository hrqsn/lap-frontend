import Header from '@/components/header'
import Footer from '@/components/footer'
import { useState, useRef, useEffect } from 'react'
import axios from '@/lib/axios'
import { SERVER_BASE_URL } from '@/lib/utils/constants'

const useStorage = (key, defaultValue) => {
  const [value, setValue] = useState(defaultValue)

  useEffect(() => {
    const currentValue = window.localStorage.getItem(key)

    if (currentValue !== null) {
      setValue(JSON.parse(currentValue))
    }
  }, [key])

  useEffect(() => {
    window.localStorage.setItem(key, JSON.stringify(value))
  }, [key, value])

  return [value, setValue]
}

export default function Home () {
  const [isEditorOpen, setIsEditorOpen] = useState(false)
  const [isPreviewOpen, setIsPreviewOpen] = useState(false)
  const [color, setColor] = useState({
    color: '#6233A9',
    bg: '#FFFFFF',
    textColor: '#6233A9'
  })
  const [bgColor, setBgColor] = useState('#FFFFFF')
  const [uid, setUid] = useState(null)
  const [code, setCode] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [isContinue, setIsContinue] = useState(false)
  const [currentValue, setCurrentValue] = useStorage('lap_current', null)

  const copied = useRef(null)
  const bgColorPicker = useRef(null)

  const _subscription = async () => {
    try {
      const res = await axios.post(`${SERVER_BASE_URL}/new`)
      if (res.data.success) {
        setUid(res.data.uid)
        setLoading(false)
        setIsEditorOpen(true)
        setIsPreviewOpen(false)
        setTimeout(() => scrollTo({
          left: 0,
          top: 640,
          behavior: 'smooth'
        }), 240)
        generateCode(res.data.uid)
        setCurrentValue(res.data.uid)
        return
      }
    } catch (error) {
      console.error(error)
      setError(error.message)
      setLoading(false)
      return
    }
  }

  const subscription = async () => {
    setUid(null)
    setCode(null)
    setLoading(true)
    setError(null)
    setIsContinue(false)
    if (currentValue !== null) {
      if (window.confirm('前回生成したコードが残っています。新しく生成せずに復元しますか？')) {
        setLoading(false)
        setIsEditorOpen(true)
        setIsPreviewOpen(false)
        setIsContinue(true)
        setTimeout(() => scrollTo({
          left: 0,
          top: 640,
          behavior: 'smooth'
        }), 240)
        generateCode(currentValue)
      } else {
        _subscription()
      }
    } else {
      _subscription()
    }
  }

  const generateCode = (_uid) => {
    const code = `
      <div class="c-lap-container" data-lap-id="${_uid}" data-lap-bg="${color.bg.split('#')[1]}" data-lap-color="${color.color.split('#')[1]}" data-lap-textColor="${color.textColor.split('#')[1]}"><script src="https://storage.googleapis.com/halsakuragi/lap/1.0.0/widget.min.js"></script></div>`
    return setCode(code)
  }

  const copyCode = () => {
    copied.current.classList.add('visible')
    setTimeout(() => copied.current.classList.remove('visible'), 2000)
    navigator.clipboard.writeText(code)
  }

  return (
    <>
      <Header />

      <main className='max-w-screen-md mx-auto px-4'>
        <div className='mt-24 sm:mt-32'>
          <h1 className='text-2xl sm:text-4xl font-bold text-primary'>感謝の気持ちを贈る、もらう</h1>
          <p className='mt-6 text-gray-800'>サイトに設置できる拍手ボタン「Lap」を用意しました。<br />生成されたコードをHTMLに貼り付けるだけで、訪問者からフィードバック👏を受け取れます。</p>
          {error && <p className='text-center mt-8 text-red-600'>{error}</p>}
          <div className='mt-10'>
            <button className={`btn-lg btn-primary ${loading && 'btn-loading'}`} onClick={() => subscription()}>{loading ? 'コードを生成する...' : 'コードを生成する'}</button>
          </div>
        </div>
        {isEditorOpen && isPreviewOpen && (
          <div className='bg-gray-100 p-8 sm:p-20 md:-mx-20 mt-64 rounded-md'>
            <div className='grid grid-cols-7 gap-x-12'>
              <div className='col-span-7 sm:col-span-3'>
                <div className='relative color-preview rounded-md w-full h-full flex items-center justify-center' style={{ backgroundColor: bgColor }}>
                  <div className='absolute top-0 right-0 p-4'>
                    <div className='relative w-6 h-6 rounded-full border border-gray-500 cursor-pointer z-100' style={{ backgroundColor: bgColor }} onClick={() => bgColorPicker.current.click()} />
                    <input type="color" id="c-0" className='opacity-0 absolute top-0 mt-6' ref={bgColorPicker} defaultValue={bgColor} onInput={(e) => {setBgColor(e.target.value)}} />
                  </div>
                  <svg width="98" height="131" viewBox="0 0 98 131" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="49" cy="49" r="46.8" fill={color.bg} stroke={color.color} strokeWidth="2.4"/>
                    <path d="M50.2417 29.1572C49.6476 29.1582 49.146 28.7002 49.102 28.0983L48.2036 15.8019C48.1578 15.1727 48.6306 14.6253 49.2597 14.5787C49.8827 14.5346 50.4363 15.0048 50.483 15.6348L51.3813 27.9313C51.4271 28.5604 50.9543 29.1078 50.3252 29.1545C50.2962 29.1563 50.2689 29.1572 50.2417 29.1572Z" fill={color.color}/>
                    <path d="M55.9885 29.9724C55.8566 29.9726 55.7213 29.95 55.5902 29.901C54.9985 29.6822 54.696 29.0245 54.9148 28.4327L56.3848 24.4573C56.6036 23.8655 57.2631 23.5613 57.8522 23.7818C58.444 24.0006 58.7465 24.6574 58.5277 25.2501L57.0576 29.2255C56.8879 29.6862 56.4525 29.9717 55.9885 29.9724Z" fill={color.color}/>
                    <path d="M44.939 30.7783C44.5189 30.7789 44.1143 30.5476 43.9141 30.1463L41.2878 24.883C41.0057 24.3175 41.2349 23.6316 41.7995 23.3504C42.365 23.0683 43.0499 23.2974 43.3321 23.8621L45.9584 29.1254C46.2405 29.6909 46.0113 30.3767 45.4467 30.658C45.2834 30.7408 45.1103 30.778 44.939 30.7783Z" fill={color.color}/>
                    <path d="M49.4543 48.456C48.8532 47.898 48.068 47.6198 47.2516 47.6378C46.4317 47.669 45.6739 48.0173 45.1159 48.6184L44.4079 49.3806L46.7762 38.8418C47.1453 37.19 46.104 35.5439 44.4521 35.1713C44.0556 35.0823 43.6593 35.0802 43.2806 35.1432C43.1512 33.8639 42.2346 32.7475 40.9124 32.4509C39.6113 32.162 38.3257 32.752 37.6507 33.8191C37.3701 33.649 37.0676 33.5124 36.7388 33.4382C35.0896 33.0674 33.44 34.1087 33.0682 35.7615L33.0307 35.9276C32.7862 35.7944 32.5276 35.6806 32.2419 35.616C30.5883 35.246 28.9431 36.2874 28.5801 37.9023C28.5626 37.9691 26.8367 44.6323 25.6971 49.7057C24.4998 55.0375 25.4228 58.4747 25.4634 58.6179C25.604 59.1239 26.0641 59.4562 26.565 59.4554C26.6661 59.4553 26.768 59.441 26.8699 59.4127C27.4778 59.2448 27.8344 58.615 27.6647 58.0063C27.6568 57.9764 26.8541 54.9854 27.9265 50.2065C29.0574 45.1701 30.7746 38.5412 30.8008 38.4393C30.8959 38.0164 31.3164 37.7521 31.7393 37.8446C32.1621 37.9397 32.4291 38.3611 32.334 38.7831C32.313 38.8745 32.3263 38.9641 32.3282 39.0555L30.9242 45.306C30.7863 45.9214 31.1731 46.5324 31.7885 46.6711C31.8737 46.6903 31.9581 46.699 32.0416 46.6989C32.5636 46.698 33.0341 46.3379 33.1536 45.8069L35.2977 36.2632C35.3928 35.8395 35.8177 35.5717 36.2379 35.6668C36.4427 35.713 36.6169 35.8358 36.7297 36.014C36.8407 36.1896 36.8771 36.3987 36.8326 36.6018L34.6877 46.1524C34.5498 46.7678 34.9366 47.3788 35.552 47.5176C36.1682 47.6607 36.7784 47.2687 36.9171 46.6542L39.0585 37.1158C39.0594 37.1132 39.0603 37.1114 39.0603 37.1097C39.0603 37.107 39.0603 37.1053 39.0611 37.1035L39.4713 35.2776C39.5673 34.8548 39.9869 34.5878 40.4124 34.6803C40.8344 34.7754 41.1004 35.1977 41.0053 35.6197L38.4476 46.998C38.3098 47.6134 38.6965 48.2244 39.3119 48.3632C39.355 48.3736 39.3981 48.3727 39.4402 48.3779C39.4622 48.384 39.479 48.3998 39.5018 48.405C40.119 48.5499 40.7291 48.157 40.867 47.5417L43.011 37.9989C43.107 37.576 43.5284 37.3073 43.9495 37.4016C44.3723 37.4967 44.6393 37.9198 44.545 38.3418L41.2526 52.9931C41.2422 53.0388 41.2545 53.0827 41.2502 53.1276C41.2398 53.219 41.2329 53.3051 41.2445 53.3956C41.2507 53.4422 41.264 53.4852 41.2763 53.5291C41.302 53.6328 41.3364 53.7303 41.3911 53.8242C41.4069 53.8506 41.4263 53.8734 41.4439 53.898C41.4906 53.9656 41.525 54.0393 41.5875 54.0981C41.6191 54.1279 41.6605 54.1384 41.6939 54.163C41.7045 54.1709 41.7168 54.177 41.7282 54.184C41.8496 54.2673 41.9771 54.3251 42.1143 54.3565C42.1152 54.3565 42.116 54.3574 42.1169 54.3574C42.1231 54.3582 42.1283 54.3582 42.1345 54.3591C42.4369 54.421 42.7453 54.359 43.006 54.1776C43.0411 54.1538 43.0762 54.1318 43.1078 54.1045C43.1376 54.0789 43.1736 54.0666 43.2008 54.0375L46.789 50.1721C46.932 50.0181 47.126 49.9291 47.3361 49.9208C47.5496 49.9249 47.7448 49.9878 47.8988 50.1291C48.2165 50.4238 48.2349 50.9221 47.9612 51.2187C47.2005 51.9959 40.4992 58.8752 39.4936 60.9481C39.2186 61.5163 39.4552 62.1996 40.0233 62.4747C40.1843 62.5526 40.3548 62.5901 40.5227 62.5899C40.9463 62.5883 41.3528 62.3513 41.5499 61.9458C42.1849 60.6363 46.8205 55.6514 49.6158 52.7953C50.7686 51.5534 50.6952 49.6061 49.4543 48.456Z" fill={color.color}/>
                    <path d="M70.6611 47.7017C68.8431 42.8325 66.2255 36.4663 66.2132 36.4373C65.621 34.8538 63.8516 34.0454 62.2619 34.635C61.9879 34.7374 61.7464 34.8854 61.5217 35.0527L61.4617 34.8911C61.174 34.1218 60.6044 33.511 59.8578 33.1712C59.112 32.8314 58.278 32.802 57.513 33.0888C57.196 33.2071 56.9142 33.3833 56.6579 33.5894C55.8461 32.6248 54.4921 32.214 53.2414 32.6773C51.9732 33.1513 51.2167 34.3801 51.2601 35.664C50.8708 35.6532 50.4798 35.7162 50.1056 35.8574C49.3363 36.1425 48.7247 36.712 48.384 37.4578C48.0433 38.2036 48.013 39.0376 48.2998 39.807L52.7038 51.5917C52.6371 51.6445 52.5633 51.6842 52.5081 51.7528C52.1081 52.2412 52.1804 52.9608 52.6679 53.3608L53.8981 54.3677C53.9747 54.4308 55.4072 55.6114 57.1639 55.6086C57.6569 55.6078 58.1762 55.5138 58.6978 55.2757C59.2721 55.0138 59.5241 54.3359 59.2631 53.7615C59.0003 53.1872 58.3232 52.9352 57.7489 53.1963C56.9577 53.5561 56.0077 53.0443 55.582 52.7673L50.4402 39.0074C50.367 38.8106 50.3745 38.5971 50.4621 38.4062C50.5488 38.2154 50.705 38.0701 50.9052 37.996C51.102 37.921 51.3138 37.9303 51.5037 38.0162C51.6946 38.1037 51.8398 38.2599 51.914 38.4575L55.3374 47.6197C55.558 48.2108 56.2167 48.5103 56.8069 48.2905C56.8368 48.2791 56.8561 48.2562 56.8842 48.2421C56.9193 48.2324 56.9545 48.2358 56.9887 48.2235C57.5798 48.0028 57.8802 47.3441 57.6596 46.753L53.5795 35.829C53.4277 35.4233 53.6344 34.9686 54.0393 34.8186C54.4441 34.6685 54.9006 34.8743 55.0515 35.2792L55.7063 37.0331C55.7072 37.0358 55.7072 37.0375 55.7081 37.0393C55.7081 37.0402 55.709 37.041 55.7099 37.0419L59.1315 46.2032C59.3522 46.7943 60.0109 47.0964 60.602 46.874C61.193 46.6534 61.4934 45.9947 61.2728 45.4036L57.8485 36.2379C57.7761 36.0421 57.7837 35.8303 57.8704 35.6394C57.9579 35.4486 58.1133 35.3042 58.3117 35.2301C58.5076 35.1559 58.7203 35.1644 58.9111 35.2502C59.102 35.3378 59.2481 35.4931 59.3213 35.6907L62.7439 44.8582C62.916 45.3175 63.3523 45.6024 63.8163 45.6017C63.9482 45.6015 64.0835 45.5784 64.2143 45.529C64.8054 45.3084 65.1058 44.6505 64.8851 44.0586L62.6434 38.0556C62.6328 37.9651 62.6335 37.8754 62.6008 37.7867C62.4499 37.3809 62.6566 36.9263 63.0606 36.7762C63.4655 36.6236 63.9219 36.8302 64.0869 37.272C64.1134 37.3352 66.7168 43.6672 68.5208 48.5013C70.2162 53.042 69.845 56.1676 69.8415 56.1939C69.7573 56.8189 70.1958 57.3938 70.8208 57.4789C70.8735 57.4859 70.9254 57.4893 70.9772 57.4892C71.5397 57.4883 72.0285 57.0728 72.1067 56.4997C72.1258 56.352 72.5727 52.8229 70.6611 47.7017Z" fill={color.color}/>
                    <path d="M51.6045 54.4495C51.1126 54.0539 50.393 54.1351 49.9983 54.6252C49.6036 55.1179 49.6821 55.8367 50.1748 56.2313C55.0514 60.143 56.3041 61.5163 56.6177 61.9878C56.8379 62.3187 57.202 62.4974 57.5711 62.4968C57.7882 62.4965 58.0078 62.4355 58.2009 62.306C58.7267 61.9563 58.8689 61.2469 58.5191 60.721C58.0752 60.0538 56.8752 58.6769 51.6045 54.4495Z" fill={color.color}/>
                    <path d="M58.9233 50.1098C58.4391 50.144 58.0742 50.5647 58.1084 51.0479C58.1425 51.5321 58.5588 51.8803 59.0465 51.8637C62.3257 51.6063 65.4203 56.2537 65.4512 56.3011C65.6203 56.5566 65.9009 56.695 66.1865 56.6946C66.3526 56.6943 66.5203 56.6466 66.6687 56.5479C67.0734 56.2801 67.1841 55.736 66.9172 55.3313C66.7683 55.1056 63.2078 49.8086 58.9233 50.1098Z" fill={color.color}/>
                    <path d="M44.173 70.9841L44.1931 83.5841L41.2771 83.5887L41.2608 73.3288L38.7408 73.3328L38.737 70.9928L44.173 70.9841Z" fill={color.color}/>
                    <path d="M50.7895 70.7576C52.5535 70.7548 53.9344 71.2926 54.9321 72.371C55.9298 73.4374 56.4302 74.9786 56.4334 76.9946C56.4357 78.4226 56.1677 79.6471 55.6293 80.6679C55.1029 81.6887 54.3541 82.4639 53.383 82.9935C52.4118 83.523 51.2902 83.7888 50.0182 83.7908C49.3462 83.7919 48.7041 83.7209 48.0919 83.5779C47.4796 83.4229 46.9573 83.2077 46.5249 82.9324L47.6015 80.7887C48.2141 81.2077 49.0005 81.4165 49.9605 81.4149C51.0285 81.4132 51.874 81.0999 52.497 80.4749C53.12 79.8379 53.4545 78.9254 53.5006 77.7373C52.7458 78.4945 51.7024 78.8742 50.3704 78.8763C49.5664 78.8776 48.8342 78.7167 48.1736 78.3938C47.5131 78.0708 46.9904 77.6156 46.6055 77.0283C46.2205 76.4289 46.0274 75.7392 46.0262 74.9592C46.0248 74.1192 46.2337 73.3808 46.6527 72.7442C47.0716 72.1075 47.6409 71.6206 48.3603 71.2835C49.0918 70.9343 49.9015 70.759 50.7895 70.7576ZM51.015 76.6972C51.651 76.6962 52.1667 76.5214 52.5621 76.1728C52.9695 75.8121 53.1728 75.3558 53.1719 74.8038C53.1711 74.2518 52.9724 73.8021 52.5758 73.4548C52.1912 73.1074 51.657 72.9342 50.973 72.9353C50.349 72.9363 49.8392 73.1051 49.4438 73.4417C49.0603 73.7783 48.869 74.2347 48.87 74.8107C48.8709 75.3867 49.0636 75.8483 49.4482 76.1957C49.8447 76.5311 50.367 76.6983 51.015 76.6972Z" fill={color.color}/>
                    <path d="M14.92 119.382L13.384 119.766V117.494H14.968V115.638H13.384V112.614H11.432V115.638H9.624V117.494H11.432V120.246C10.68 120.422 9.992 120.582 9.416 120.694L9.832 122.63L11.432 122.23V125.446C11.432 125.654 11.368 125.718 11.16 125.734C10.968 125.734 10.392 125.734 9.848 125.718C10.072 126.23 10.312 127.014 10.376 127.51C11.448 127.526 12.168 127.462 12.696 127.158C13.224 126.854 13.384 126.374 13.384 125.462V121.702C13.976 121.542 14.568 121.382 15.144 121.222L14.92 119.382ZM17.496 124.838V121.878H21.784V124.838H17.496ZM21.784 117.222V120.086H17.496V117.222H21.784ZM20.184 115.43C20.488 114.646 20.792 113.75 21.064 112.87L18.792 112.63C18.696 113.462 18.472 114.534 18.232 115.43H15.608V127.446H17.496V126.646H21.784V127.35H23.768V115.43H20.184ZM40.328 120.79H34.008V118.918H39.384V117.094H34.008V114.998C35.768 114.79 37.448 114.518 38.872 114.15L37.496 112.566C34.872 113.254 30.488 113.686 26.632 113.846C26.824 114.262 27.064 115.03 27.112 115.526C28.68 115.462 30.36 115.366 32.024 115.222V117.094H26.792V118.918H32.024V120.79H25.704V122.646H32.024V125.222C32.024 125.542 31.88 125.654 31.512 125.67C31.16 125.67 29.816 125.67 28.632 125.622C28.936 126.134 29.304 126.966 29.416 127.51C31.048 127.526 32.2 127.478 32.968 127.19C33.72 126.886 34.008 126.39 34.008 125.254V122.646H40.328V120.79ZM48.776 113.318L46.664 113.142C46.632 113.718 46.52 114.342 46.344 114.982C46.088 114.982 45.816 114.982 45.576 114.982C44.76 114.982 43.576 114.918 42.76 114.79V116.662C43.64 116.726 44.808 116.758 45.464 116.758C45.528 116.758 45.592 116.758 45.672 116.758C44.952 118.198 43.816 119.622 42.136 121.174L43.848 122.454C44.392 121.75 44.856 121.174 45.336 120.694C45.944 120.102 46.936 119.59 47.832 119.59C48.28 119.59 48.712 119.734 48.952 120.134C47.128 121.078 45.208 122.358 45.208 124.406C45.208 126.47 47.064 127.078 49.576 127.078C51.08 127.078 53.048 126.95 54.104 126.806L54.168 124.742C52.76 125.014 50.984 125.19 49.624 125.19C48.056 125.19 47.304 124.95 47.304 124.07C47.304 123.27 47.944 122.646 49.144 121.958C49.128 122.662 49.112 123.43 49.064 123.91H50.984C50.968 123.174 50.936 121.99 50.92 121.094C51.896 120.646 52.808 120.294 53.528 120.006C54.072 119.798 54.92 119.478 55.432 119.334L54.632 117.478C54.04 117.782 53.48 118.038 52.856 118.31C52.2 118.598 51.528 118.87 50.696 119.254C50.344 118.438 49.544 118.022 48.568 118.022C48.04 118.022 47.176 118.15 46.76 118.342C47.08 117.878 47.4 117.302 47.672 116.71C49.4 116.662 51.368 116.534 52.888 116.31L52.904 114.454C51.496 114.694 49.896 114.838 48.376 114.918C48.584 114.246 48.696 113.718 48.776 113.318ZM61.448 116.166H59.864V114.694H61.448V116.166ZM61.448 119.078H59.864V117.59H61.448V119.078ZM61.448 121.99H59.864V120.486H61.448V121.99ZM63.112 113.19H58.248V123.51H63.112V113.19ZM59.016 123.622C58.696 124.742 58.088 125.894 57.368 126.646C57.768 126.854 58.456 127.302 58.776 127.574C59.528 126.71 60.264 125.334 60.68 123.99L59.016 123.622ZM60.888 124.182C61.4 125.014 61.976 126.15 62.2 126.886L63.672 126.166C63.416 125.462 62.824 124.39 62.296 123.59L60.888 124.182ZM69.624 122.854V123.606H66.12V122.854H69.624ZM66.12 125.718V124.95H69.624V125.718H66.12ZM64.392 127.542H66.12V127.094H69.624V127.542H71.432V121.446H64.392V127.542ZM70.296 117.318H68.616V116.422H70.296V117.318ZM70.296 119.414H68.616V118.518H70.296V119.414ZM65.384 118.518H66.936V119.414H65.384V118.518ZM66.936 116.422V117.318H65.384V116.422H66.936ZM70.488 115.094C70.84 114.55 71.272 113.846 71.672 113.126L69.784 112.582C69.544 113.27 69.064 114.23 68.712 114.87L69.384 115.094H66.216L66.92 114.806C66.744 114.198 66.248 113.302 65.8 112.63L64.216 113.222C64.552 113.798 64.904 114.518 65.128 115.094H63.752V120.742H72.008V115.094H70.488ZM79.24 124.262C79.24 123.862 79.624 123.494 80.232 123.494C81.096 123.494 81.688 124.166 81.784 125.206C81.496 125.238 81.192 125.254 80.856 125.254C79.896 125.254 79.24 124.854 79.24 124.262ZM76.52 113.958L76.584 116.038C76.952 115.99 77.464 115.942 77.896 115.91C78.744 115.862 80.952 115.766 81.768 115.75C80.984 116.438 79.32 117.782 78.424 118.518C77.48 119.302 75.544 120.934 74.408 121.846L75.864 123.35C77.576 121.398 79.176 120.102 81.624 120.102C83.512 120.102 84.952 121.078 84.952 122.518C84.952 123.494 84.504 124.23 83.624 124.694C83.4 123.174 82.2 121.958 80.216 121.958C78.52 121.958 77.352 123.158 77.352 124.454C77.352 126.054 79.032 127.078 81.256 127.078C85.128 127.078 87.048 125.078 87.048 122.55C87.048 120.214 84.984 118.518 82.264 118.518C81.752 118.518 81.272 118.566 80.744 118.694C81.752 117.894 83.432 116.486 84.296 115.878C84.664 115.606 85.048 115.382 85.416 115.142L84.376 113.718C84.184 113.782 83.816 113.83 83.16 113.894C82.248 113.974 78.824 114.038 77.976 114.038C77.528 114.038 76.968 114.022 76.52 113.958Z" fill={color.textColor}/>
                  </svg>
                </div>
              </div>
              <div className='col-span-7 sm:col-span-4 pt-4'>
                <h1 className='text-xl font-bold'>テーマカラーを編集</h1>
                <div className='mt-8 flex space-x-6'>
                  <div>
                    <p className='text-sm'>テーマ色</p>
                    <div className='relative'>
                      <div className='color-picker'>
                        <input type="color" id="c-0" defaultValue={color.color} onInput={(e) => {setColor({color: e.target.value, bg: color.bg, textColor: color.textColor})}} />
                      </div>
                    </div>
                  </div>
                  <div>
                    <p className='text-sm'>背景色</p>
                    <div className='relative'>
                      <div className='color-picker'>
                        <input type="color" id="c-0" defaultValue={color.bg} onInput={(e) => {setColor({color: color.color, bg: e.target.value, textColor: color.textColor})}} />
                      </div>
                    </div>
                  </div>
                  <div>
                    <p className='text-sm'>文字色</p>
                    <div className='relative'>
                      <div className='color-picker'>
                        <input type="color" id="c-0" defaultValue={color.textColor} onInput={(e) => {setColor({color: color.color, bg: color.bg, textColor: e.target.value})}} />
                      </div>
                    </div>
                  </div>
                </div>
                <button className='mt-10 btn btn-lg btn-primary' onClick={() => {setIsPreviewOpen(false);generateCode(uid)}}>決定する</button>
              </div>
            </div>
          </div>
        )}
        {isEditorOpen && !isPreviewOpen && (
          <div className='bg-gray-100 p-8 sm:p-20 md:-mx-20 mt-64 rounded-md'>
            <h1 className='text-xl font-bold'>{isContinue ? 'コードを復元しました' : 'コードを生成しました'}</h1>
            <p className='mt-6 leading-normal'>{isContinue ? 'コードを復元しました' : 'コードを生成しました'}。<br />このコードをコピーして、HTMLのbodyタグ内に貼り付ければ設置完了です。<br />必要に応じて、<span className='cursor-pointer text-primary underline' onClick={() => setIsPreviewOpen(true)}>テーマカラーを編集</span> できます。</p>
            <a href='https://halsakuragi.com/blog/lap' target='_blank' rel='noopener noreferrer' className='inline-block mt-4 text-sm text-primary'>詳しい設置方法はこちら</a>
            <div className='mt-8'>
              <div className='mt-1 flex rounded-md shadow-sm'>
                <div className='flex-1 min-w-0 block w-full px-4 py-2.5 rounded-none rounded-l-md sm:text-sm bg-white text-gray-600 word-clamp'>{code}</div>
                <div className='relative' onClick={() => copyCode()}>
                  <span onClick={() => copyCode()} className='relative cursor-pointer w-full h-full z-10 inline-flex items-center px-10 rounded-r-md bg-primary text-white sm:text-sm'><span className='hidden sm:block'>コードをコピー</span><span className='block sm:hidden'>コピー</span></span>
                  <div className='copied' ref={copied}>コピーしました！</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>

      <div className='lap-try'>
        <img src='/img/try.svg' />
      </div>

      <Footer />
    </>
  )
}
